#+TITLE: Emacs Config
#+AUTHOR: Zach Dodge

* User info
#+begin_src elisp
(setq user-full-name "Zachary Dodge"
      user-mail-address "zacharysdodge@gmail.com")
#+end_src

* Display startup time
#+begin_src elisp
(defun display-startup-time ()
  "Displays the startup time in the echo buffer when Emacs is finished loading."
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time (time-subtract after-init-time before-init-time)))
           gcs-done))
(add-hook 'emacs-startup-hook #'display-startup-time)
#+end_src

* Configure use-package
#+begin_src elisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

* Shell path
#+begin_src elisp
(use-package exec-path-from-shell
  :init
  (setq exec-path-from-shell-debug t)
  :config
  (exec-path-from-shell-initialize))
#+end_src

* Setup general
#+begin_src elisp
(use-package general)

(general-define-key
 :states 'normal
 "q" nil)

(general-define-key
 :keymaps 'global
 "<mouse-3>" 'mouse-set-point
 "<drag-mouse-3>" 'mouse-set-region
 "<home>" 'evil-beginning-of-visual-line
 "<end>" 'evil-end-of-visual-line)
#+end_src

* Marginalia, Vertico, Swiper
#+begin_src elisp
(use-package marginalia
  :init
  (marginalia-mode))

(use-package vertico
  :demand t
  :config
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
  (vertico-mode)
  :general
  (general-define-key
   :keymaps 'vertico-map
   "DEL" #'vertico-directory-delete-char))

(use-package savehist
  :init
  (setq savehist-additional-variables '(extended-command-history))
  (savehist-mode))

(use-package consult)

(use-package consult-projectile)

(use-package all-the-icons)

(use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

(use-package company
  :config
  (global-company-mode))

(use-package projectile)
#+end_src

* Popper to control windows
#+begin_src elisp
(use-package popper
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "^\\*Warnings\\*"
          "^\\*IBuffer\\*"
          "^\\*Compile-Log\\*"
          "^\\*Backtrace\\*"
          "[Oo]utput\\*$"
          "\\*Help\\*"
          "\\*helpful\\*"
          "\\*Excorporate\\*"
          "\\*xref\\*"
          help-mode
          helpful-mode
          compilation-mode))
  (popper-mode t))
#+end_src

* Prevent Emacs from littering files and setup custom file
#+begin_src elisp
(use-package no-littering
  :custom
  (auto-save-file-name-transforms
   `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (custom-file (expand-file-name "custom.el" user-emacs-directory)))
#+end_src

* Evil
#+begin_src elisp
(use-package evil
  :init
  (setq evil-want-keybinding nil)
  (setq evil-want-integration t)
  (setq evil-want-minibuffer t)
  :custom
  (evil-auto-indent t)
  (evil-cross-lines t)
  :config
  (evil-mode t)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

(use-package evil-collection
  :config
  (evil-collection-init)
  (evil-collection-init '(minibuffer)))

(use-package which-key
  :custom
  (which-key-idle-delay 0.3)
  :config
  (which-key-mode))

(use-package evil-terminal-cursor-changer
  :config
  (add-hook 'tty-setup-hook #'evil-terminal-cursor-changer-activate))

(use-package clipetty
  :hook (after-init . global-clipetty-mode))
#+end_src

* Org mode
#+begin_src elisp
(use-package org-appear
  :hook
  (org-mode . org-appear-mode))

(use-package org-bullets
  :hook
  (org-mode . org-bullets-mode))

(defun visual-fill-setup ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook
  (org-mode . visual-fill-setup))

(use-package evil-org
  :hook
  (org-mode . evil-org-mode))
#+end_src

* Magit
#+begin_src elisp
(use-package magit
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package git-gutter
  :config
  (global-git-gutter-mode t))
#+end_src

* Languages
** Flycheck
#+begin_src elisp
(use-package flycheck
  :config
  (global-flycheck-mode t))
#+end_src

** JavaScript
#+begin_src elisp
(use-package json-mode
  :commands 'json-mode
  :mode (("\\.json\\'" . json-mode)))

(use-package web-mode
  :custom
  (web-mode-auto-quote-style nil)
  (web-mode-code-indent-offset 2)
  (web-mode-markup-indent-offset 2)
  :mode ("\\.tsx?\\'" . web-mode))

(use-package prettier-js
  :hook (web-mode . prettier-js-mode)
  :commands (prettier-js-mode prettier-js))
#+end_src

** LSP
#+begin_src elisp
(use-package lsp-mode
  :hook (web-mode . lsp-deferred)
  :config
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\\]build\\'"))

(use-package lsp-ui
  :after 'lsp-mode)
#+end_src

** Tree sitter
#+begin_src elisp
(use-package tree-sitter
  :config
  (global-tree-sitter-mode))

(use-package tree-sitter-langs
  :config
  (tree-sitter-require 'tsx))
#+end_src

** Markdown
#+begin_src elisp
(use-package markdown-mode
  :commands 'markdown-mode
  :mode (("\\.md\\'" . markdown-mode)))
#+end_src

** Fish
#+begin_src elisp
(use-package fish-mode
  :commands 'fish-mode
  :mode (("\\.fish\\'" . fish-mode)))
#+end_src

* Vterm
#+begin_src elisp
(use-package vterm
  :commands vterm
  :config
  (when (not (or (eq system-type 'windows-nt) (eq system-type 'ms-dos))) (setq vterm-shell (executable-find "fish")))
  :hook
  (vterm-mode . (lambda () (display-line-numbers-mode -1))))
#+end_src

* Miscellaneous editor packages
#+begin_src elisp
(use-package avy
  :custom
  (avy-style 'pre)
  :commands (avy-goto-char avy-goto-word-0 avy-goto-line))

(use-package undo-tree
  :custom (undo-tree-history-directory-alist `(("." . ,(concat user-emacs-directory "undo-tree-hist/"))))
  :hook ((text-mode . undo-tree-mode)
         (prog-mode . undo-tree-mode))
  :general
  (general-define-key :states '(normal visual) "u" #'undo-tree-undo))

(use-package paren
  :config
  (show-paren-mode t))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package highlight-indentation
  :hook (prog-mode . highlight-indentation-mode)
  :hook (prog-mode . highlight-indentation-current-column-mode))
#+end_src

* Configure path from shell
#+begin_src elisp
(use-package exec-path-from-shell
  :config
  (when (eq window-system 'ns)
    (exec-path-from-shell-initialize)))
#+end_src

* Load custom file
#+begin_src elisp
(load (expand-file-name "custom.el" user-emacs-directory) t t)
#+end_src

* Doom zenburn theme and modeline
#+begin_src elisp
(use-package doom-modeline
  :config
  (doom-modeline-mode t))

(use-package doom-themes
  :config
  (load-theme 'doom-monokai-machine t)
  (defun my/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (load-theme 'doom-solarized-light t))
      ('dark (load-theme 'doom-monokai-machine t))))
  (when (eq system-type 'darwin)
    (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)))
#+end_src

* Automatically update packages
#+begin_src elisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

* Global modes and non-standard customization
#+begin_src elisp
(global-subword-mode t)
(tool-bar-mode 0)
(column-number-mode)
(global-display-line-numbers-mode 1)
(add-hook 'prog-mode-hook 'hs-minor-mode)
(global-hl-line-mode)
(global-auto-revert-mode t)
(xterm-mouse-mode)
(set-window-scroll-bars (minibuffer-window) nil nil)
#+end_src

* Keybindings
#+begin_src elisp
(when (not (fboundp 'revert-buffer-quick))
  (defun revert-buffer-quick ()
    (interactive)
    (revert-buffer t (not (buffer-modified-p)))))
(general-define-key
 :states '(normal visual)
 :keymaps 'override
 :prefix "SPC"
 "SPC" '(execute-extended-command :which-key "M-x")
 ";" '(eval-expression :which-key)
 "b" '(:ignore t :which-key "buffer")
 "b b" '(consult-projectile-switch-to-buffer :which-key)
 "b B" '(switch-to-buffer :which-key)
 "b d" '(kill-current-buffer :which-key)
 "b f" '(lsp-format-buffer :which-key)
 "b n" '(next-buffer :which-key)
 "b p" '(previous-buffer :which-key)
 "b r" '(revert-buffer-quick :which-key)
 "c" '(:ignore t :which-key "code")
 "c a" '(lsp-execute-code-action :which-key)
 "c c" '(comment-dwim :which-key)
 "c e" '(lsp-eslint-apply-all-fixes :which-key)
 "c f" '(hs-toggle-hiding :which-key)
 "c r" '(lsp-rename :which-key)
 "e" '(eval-last-sexp :which-key)
 "f" '(:ignore t :which-key "file")
 "f c" '((lambda ()
           (interactive)
           (find-file (expand-file-name "custom.el" user-emacs-directory)))
         :which-key "Edit custom file")
 "f e" '((lambda ()
           (interactive)
           (find-file (expand-file-name "early-init.el" user-emacs-directory)))
         :which-key "Edit early-init file")
 "f f" '(find-file :which-key)
 "f i" '((lambda ()
           (interactive)
           (find-file (expand-file-name "init.el" user-emacs-directory)))
         :which-key "Edit init file")
 "f o" '((lambda ()
           (interactive)
           (find-file (expand-file-name "README.org" user-emacs-directory)))
         :which-key "Edit literate config")
 "f p" '((lambda ()
           (interactive)
           (let ((default-directory user-emacs-directory))
             (consult-projectile-find-file)))
         :which-key "Browse private config")
 "f s" '(save-buffer :which-key)
 "g" '(:ignore t :which-key "magit")
 "g b" '(magit-blame :which-key)
 "g g" '(magit-status :which-key)
 "h" '(:ignore t :which-key "help")
 "h f" '(describe-function :which-key)
 "h k" '(describe-key :which-key)
 "h m" '(describe-mode :which-key)
 "h o" '(describe-symbol :which-key)
 "h t" '(load-theme :which-ket)
 "h v" '(describe-variable :which-key)
 "j" '(avy-goto-char :which-key)
 "J" '(:ignore t :which-key "jump")
 "J c" '(avy-goto-char :which-key)
 "J l" '(avy-goto-line :which-key)
 "J w" '(avy-goto-word-0 :which-key)
 "o" '(:ignore t :which-key "open/org")
 "o c" '(org-toggle-checkbox :which-key)
 "o t" '(org-todo :which-key)
 "o v" '(vterm :which-key)
 "o w" '((lambda ()
           (interactive)
           (find-file (concat (file-name-as-directory "~/org") "work.org")))
         :which-key "Edit work org file")
 "p" '(:ignore t :which-key "project")
 "p a" '(projectile-add-known-project :which-key)
 "p b" '(consult-projectile-switch-to-buffer :which-key)
 "p f" '(consult-projectile-find-file :which-key)
 "p p" '(consult-projectile-switch-project :which-key)
 "q" '(:ignore t :which-key "quit")
 "q q" '(evil-quit-all :which-key)
 "s" '(:ignore t :which-key "search")
 "s r" '(consult-rg :which-key)
 "s s" '(consult-line :which-key)
 "t" '(:ignore t :which-key "toggle")
 "t m" '(toggle-frame-maximized :which-key)
 "u" '(:ignore t :which-key "undo")
 "u b" '(undo-tree-switch-branch :which-key)
 "u r" '(undo-tree-redo :which-key)
 "u u" '(undo-tree-undo :which-key)
 "u v" '(undo-tree-visualize :which-key)
 "w" '(:ignore t :which-key "window")
 "w d" '(evil-window-delete :which-key)
 "w h" '(evil-window-left :which-key)
 "w j" '(evil-window-down :which-key)
 "w k" '(evil-window-up :which-key)
 "w l" '(evil-window-right :which-key)
 "w <left>" '(evil-window-left :which-key)
 "w <down>" '(evil-window-down :which-key)
 "w <up>" '(evil-window-up :which-key)
 "w <right>" '(evil-window-right :which-key)
 "w s" '(evil-window-split :which-key)
 "w v" '(evil-window-vsplit :which-key)
 "x" '(scratch-buffer :which-key))
#+end_src

* Load any private (non-version-controlled) config

#+begin_src elisp
(load (expand-file-name "private.el" user-emacs-directory) t t)
#+end_src
